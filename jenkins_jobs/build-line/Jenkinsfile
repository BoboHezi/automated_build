
def devops_token_extra = ''
def prepare_rst = ''
def build_rst = ''
def upload_rst = ''
def sv_rst = ''

pipeline {
    agent 'any'
    stages {
        stage('prepare') {
            steps {
                script {
                    println "project_name: ${project_name}"
                    println "code_dir: ${code_dir}"
                    println "server_ip_address: ${server_ip_address}"
                    println "server_hostname: ${server_hostname}"
                    println "build_variant: ${build_variant}"
                    println "build_sign: ${build_sign}"
                    println "build_action: ${build_action}"
                    println "build_verity: ${build_verity}"
                    println "need_publish: ${need_publish}"
                    println "devops_host_id: ${devops_host_id}"
                    println "devops_compile_id: ${devops_compile_id}"
                    println "is_new_project: ${is_new_project}"
                    println "test_pipeline: ${test_pipeline}"
                    println "test_host: ${test_host}"
                    println "sign_ftp_url: ${sign_ftp_url}"
                    println "sign_ftp_upload_username: ${sign_ftp_upload_username}"
                    println "sign_ftp_upload_passwd: ${sign_ftp_upload_passwd}"
                    println "sv_platform_url: ${sv_platform_url}"
                    println "sv_platform_username: ${sv_platform_username}"
                    println "sv_platform_passwd: ${sv_platform_passwd}"
                    println "sv_platform_terrace: ${sv_platform_terrace}"
                    println "sv_platform_board: ${sv_platform_board}"
                    println "sv_platform_model: ${sv_platform_model}"
                    println "sv_platform_brand: ${sv_platform_brand}"
                    println "sv_platform_odm: ${sv_platform_odm}"
                    println "sv_platform_cclist: ${sv_platform_cclist}"
                    println "sv_verity_purpose: ${sv_verity_purpose}"
                    println "publish_username: ${publish_username}"
                    println "LOCAL_SCRIPT_PATH: ${LOCAL_SCRIPT_PATH}"
                    println "REMOTE_SCRIPT_PATH: ${REMOTE_SCRIPT_PATH}"
                    devops_token_extra = sh(returnStdout: true, script: 'cat $DEVOPS_TOKEN_FILE || echo ""')
                }
            }
        }
        stage('prepare-jenkins-server') {
            steps {
                script {
                    prepare_rst = sh(returnStatus: true, script: '''
                    if ! type sshpass >/dev/null 2>&1; then
                        echo -e "\nprepare-jenkins-server: install sshpass"
                        if type apt-get >/dev/null 2>&1; then
                            sudo -S apt-get install sshpass -y << EOF
1
EOF
                        elif type yum >/dev/null 2>&1; then
                            yum install sshpass -y
                        fi
                    fi
                    if ! type pip3 >/dev/null 2>&1; then
                        echo -e "\nprepare-jenkins-server: install python3-pip"
                        if type apt-get >/dev/null 2>&1; then
                            sudo -S apt-get install python3-pip -y << EOF
1
EOF
                        elif type yum >/dev/null 2>&1; then
                            yum install python-pip3 -y
                        fi
                    fi
                    ''')
                    sh """exit $prepare_rst"""
                }
            }
        }
        stage('prepare-host-mkdir') {
            steps {
                script {
                    prepare_rst = sh(returnStatus: true, script: '''
                    sshpass -p "$server_passwd" ssh -o StrictHostKeyChecking=no "$server_hostname@$server_ip_address" << EOF

                    if [ ! -d $REMOTE_SCRIPT_PATH ]; then
                        echo -e "\ncreate path $REMOTE_SCRIPT_PATH"
                        mkdir -p $REMOTE_SCRIPT_PATH
                    fi
                    cd $REMOTE_SCRIPT_PATH
                    pwd
                    ''')
                    sh """exit $prepare_rst"""
                }
            }
        }
        stage('prepare-host-upload-script') {
            steps {
                script {
                    prepare_rst = sh(returnStatus: true, script: '''
                    set +e
                    sshpass -p "$server_passwd" scp -r $LOCAL_SCRIPT_PATH* "$server_hostname@$server_ip_address":$REMOTE_SCRIPT_PATH > /dev/null 2>&1
                    
                    sshpass -p "$server_passwd" ssh -o StrictHostKeyChecking=no "$server_hostname@$server_ip_address" << EOF
                    cd $REMOTE_SCRIPT_PATH
                    pwd
                    ./link.sh $code_dir
                    
                    echo "$cherry_picks" > cps 
                    ''')
                    sh """exit $prepare_rst"""
                }
            }
        }
        stage('build') {
            steps {
                script {
                    build_rst = sh(returnStatus: true, script: '''
                    devops_token=`cat $DEVOPS_TOKEN_FILE || echo ""`

                    sshpass -p "$server_passwd" ssh -o StrictHostKeyChecking=no "$server_hostname@$server_ip_address" << EOF

                    # export devops_token
                    echo "devops_token: $devops_token"
                    export DEVOPS_TOKEN=$devops_token
                    readonly DEVOPS_TOKEN

                    if [ ! -d "$code_dir" ]; then
                        echo "Project code directory does not exist!!!"
                        exit -1;
                    fi

                    cd "$code_dir"
                    echo ""
                    echo -------------------------------------------------
                    echo code_dir: 
                    pwd
                    echo -------------------------------------------------
                    echo ""

                    if [ ! -f build.sh ]; then
                        echo "File build.sh does not exist!!!"
                        exit -2;
                    fi

                    if [ $test_pipeline == "true" ]; then
                        echo "Just test pipeline, exit."
                        exit 0
                    fi
                    bash build.sh "$project_name" "$build_variant" "$build_action" "$build_sign" "$build_verity" "$need_publish" "$devops_host_id" "$devops_compile_id" "$is_new_project" "$test_host" "$BUILD_URL" "$server_ip_address"

                    ''')
                    sh """exit $build_rst"""
                }
            }
        }
        stage('file-upload') {
            steps {
                script {
                    if ("${build_sign}" != "true") {
                        echo "\ndo not sign, exit file-upload!\n"
                        return
                    }
                    upload_rst = sh(returnStatus: true, script: '''
                    devops_token=`cat $DEVOPS_TOKEN_FILE || echo ""`

                    sshpass -p "$server_passwd" ssh -o StrictHostKeyChecking=no "$server_hostname@$server_ip_address" << EOF

                    # export devops_token
                    echo "devops_token: $devops_token"
                    export DEVOPS_TOKEN=$devops_token
                    readonly DEVOPS_TOKEN

                    if [ ! -d "$code_dir" ]; then
                        echo "Project code directory does not exist!!!"
                        exit -1;
                    fi

                    cd "$code_dir"
                    echo ""
                    echo -------------------------------------------------
                    echo code_dir: 
                    pwd
                    echo -------------------------------------------------
                    echo ""

                    # upload file
                    echo -e '\n./upload_ftp.py -p "$project_name" -h "$sign_ftp_url" -u "$sign_ftp_upload_username" -c "$sign_ftp_upload_passwd"\n'
                    python3 upload_ftp.py -p "$project_name" -h "$sign_ftp_url" -u "$sign_ftp_upload_username" -c "$sign_ftp_upload_passwd"

                    ''')
                    sh """exit $upload_rst"""
                }
            }
        }

        stage('sign-verity') {
            steps {
                script {
                    if ("${build_sign}" != "true") {
                        echo "\ndo not sign, exit sign-verity!\n"
                        return
                    }
                    sv_rst = sh(returnStatus: true, script: '''
                    devops_token=`cat $DEVOPS_TOKEN_FILE || echo ""`
                    verity=`[ "$build_verity" = "true" ] && echo "-v" || echo ''`

                    sshpass -p "$server_passwd" ssh -o StrictHostKeyChecking=no "$server_hostname@$server_ip_address" << EOF

                    # export devops_token
                    echo "devops_token: $devops_token"
                    export DEVOPS_TOKEN=$devops_token
                    readonly DEVOPS_TOKEN

                    if [ ! -d "$code_dir" ]; then
                        echo "Project code directory does not exist!!!"
                        exit -1;
                    fi

                    cd "$code_dir"
                    echo ""
                    echo -------------------------------------------------
                    echo code_dir: 
                    pwd
                    echo -------------------------------------------------
                    echo ""

                    if [ ! -f commit_sign_verify.py ]; then
                        echo -e "File commit_sign_verify.py does not exist!!!"
                        exit -2
                    fi

                    if [ ! -f ftp_url.txt ]; then
                        echo -e "File ftp_url.txt does not exist!!!"
                        exit -3
                    fi

                    ftp_url=$(cat ftp_url.txt)
                    echo -e "\nftp_url: $ftp_url\n"

                    echo "./commit_sign_verify.py -p \"$project_name\" -f \"ftp_url.txt\" -u \"$sv_platform_url\" \
                        -s \"$sv_platform_username\" -c \"$sv_platform_passwd\" -t \"$sv_platform_terrace\" \
                        -b \"$sv_platform_board\" -l \"$sv_platform_cclist\" -m \"$sv_platform_model\" \
                        -r \"$sv_platform_brand\" -o \"$sv_platform_odm\" -i \"$publish_username\" \
                        -e \"$sv_verity_purpose\" -d \"$devops_compile_id\" \"$verity\""

                    python3 commit_sign_verify.py -p \"$project_name\" -f \"ftp_url.txt\" -u \"$sv_platform_url\" \
                        -s \"$sv_platform_username\" -c \"$sv_platform_passwd\" -t \"$sv_platform_terrace\" \
                        -b \"$sv_platform_board\" -l \"$sv_platform_cclist\" -m \"$sv_platform_model\" \
                        -r \"$sv_platform_brand\" -o \"$sv_platform_odm\" -i \"$publish_username\" \
                        -e \"$sv_verity_purpose\" -d \"$devops_compile_id\" \"$verity\"
                    ''')
                    sh """exit $sv_rst"""
                }
            }
        }
    }

    post {
        always {
            echo 'always call'
            sh '''
            set +e
            devops_token=`cat $DEVOPS_TOKEN_FILE || echo ""`
            # export devops_token
            echo "devops_token: $devops_token"
            export DEVOPS_TOKEN=$devops_token
            readonly DEVOPS_TOKEN

            cd $LOCAL_SCRIPT_PATH

            # devops_server server status 0(idle)
            echo "./update_db.py -t devops_server -k server_status -v 0 -w id -e $devops_host_id"
            python3 update_db.py -t devops_server -k server_status -v 0 -w id -e $devops_host_id

            # devops_compile finish time
            build_finish_time=`date "+%Y-%m-%d %H:%M:%S"`
            python3 update_db.py -t devops_compile \
                -k compile_build_finish_time -v "$build_finish_time" \
                -w id -e $devops_compile_id

            echo "complete"
            '''
        }
        success {
            echo 'this build was success'
            sh '''
            set +e
            devops_token=`cat $DEVOPS_TOKEN_FILE || echo ""`
            # export devops_token
            echo "devops_token: $devops_token"
            export DEVOPS_TOKEN=$devops_token
            readonly DEVOPS_TOKEN

            cd $LOCAL_SCRIPT_PATH

            # status: build_success(0)
            echo "./notify_status.py $devops_compile_id success"
            python3 notify_status.py $devops_compile_id success

            echo "complete"
            '''
        }
        aborted {
            echo 'this build was aborted'
            sh '''
            set +e
            devops_token=`cat $DEVOPS_TOKEN_FILE || echo ""`
            # export devops_token
            echo "devops_token: $devops_token"
            export DEVOPS_TOKEN=$devops_token
            readonly DEVOPS_TOKEN

            cd $LOCAL_SCRIPT_PATH

            # compile status: 7(stoped)
            echo "./notify_status.py $devops_compile_id task_stopped"
            python3 notify_status.py $devops_compile_id task_stopped

            echo "complete"
            '''
        }
        failure {
            echo 'this build was failed'
            sh """
            set +e
            # export devops_token_extra
            echo "devops_token_extra: $devops_token_extra"
            export DEVOPS_TOKEN=$devops_token_extra
            readonly DEVOPS_TOKEN

            cd $LOCAL_SCRIPT_PATH

            echo "prepare_rst: $prepare_rst, build_rst: $build_rst, upload_rst: $upload_rst, sv_rst: $sv_rst"

            if [ "$prepare_rst" != "0" ]; then
                python3 notify_status.py $devops_compile_id prepare_failed
            elif [ "$build_rst" != "0" ]; then
                python3 notify_status.py $devops_compile_id $build_rst
            elif [ "$upload_rst" != "0" ]; then
                python3 notify_status.py $devops_compile_id upload_failed
            elif [ "$sv_rst" != "0" ]; then
                python3 notify_status.py $devops_compile_id sv_failed
            fi

            echo "complete"
            """
        }
    }
}