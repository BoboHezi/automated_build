<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>编译线</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.19">
      <gitLabConnection></gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <com.gitee.jenkins.connection.GiteeConnectionProperty plugin="gitee@1.2.5">
      <giteeConnection>Gitee</giteeConnection>
    </com.gitee.jenkins.connection.GiteeConnectionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>project_name</name>
          <description>编译项目名</description>
          <defaultValue>g1930epq_v10a_hl</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>code_dir</name>
          <description>编译服务器上，项目所属仓库的位置</description>
          <defaultValue>/data/6758N/</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>server_ip_address</name>
          <description>编译服务器IP地址</description>
          <defaultValue>10.20.100.16</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>server_hostname</name>
          <description>编译服务器，SSH用户名</description>
          <defaultValue>server</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>server_passwd</name>
          <description>编译服务器，SSH密码</description>
          <defaultValue>{AQAAABAAAAAQc0jBGdWAQQVYAZKAArCjENR/rZc2G48vg32ptE0IP3Y=}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>build_variant</name>
          <description>软件类型</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>u</string>
              <string>d</string>
              <string>e</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cherry_picks</name>
          <description>cherry-pick命令</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>build_sign</name>
          <description>是否签名</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>build_action</name>
          <description>编译行为</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>n</string>
              <string>r</string>
              <string>ota</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>build_verity</name>
          <description>是否验收</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>need_publish</name>
          <description>是否打包</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>devops_host_id</name>
          <description>服务器ID（DevOps）</description>
          <defaultValue>1374206590156066818</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>devops_compile_id</name>
          <description>编译任务ID（DevOps）</description>
          <defaultValue>1376786526867877890</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>is_new_project</name>
          <description>是否是新项目</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>test_pipeline</name>
          <description>是否用来测试pipeline</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>test_host</name>
          <description>是否用来测试主机</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>script_path</name>
          <description>do not edit</description>
          <defaultValue>/home/server/.jenkins/script</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sign_ftp_url</name>
          <description>签名包上传地址（请勿编辑）</description>
          <defaultValue>192.168.150.30</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sign_ftp_upload_username</name>
          <description>签名包上传用户名</description>
          <defaultValue>hongxiangyuan</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>sign_ftp_upload_passwd</name>
          <description>签名包上传用户密码</description>
          <defaultValue>{AQAAABAAAAAgSGjvO9hg4x7np2R8oOu021sfJoAx8axvhjYDAfxKwNEkXobhSLzoSxczyYgZeTlJ}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sv_platform_url</name>
          <description>签名验收后台URL，测试：http://192.168.151.31:8084，生产：http://sign.ttddsh.com:8084</description>
          <defaultValue>http://sign.ttddsh.com:8084</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sv_platform_username</name>
          <description>签名验收后台登录用户名</description>
          <defaultValue>hongxiangyuan</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>sv_platform_passwd</name>
          <description>签名验收后台登录用户密码</description>
          <defaultValue>{AQAAABAAAAAgBYhKd0C2BhQFKC9yz7IfijthL36bXguWoToU2L08ICVAjZUQLx5CCSVNLXKvN9yf}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sv_platform_terrace</name>
          <description>签名平台，eg:SPRD_T310p_hongxiangyuan</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sv_platform_board</name>
          <description>主板（用与验收包释放路径），若为空，则使用大写的项目名</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sv_platform_model</name>
          <description>机型，若为空，则使用大写的项目名</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sv_platform_brand</name>
          <description>品牌商，若为空，则使用项目客户号</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sv_platform_odm</name>
          <description>方案商，若为空，则使用项目渠道号最后一段（eg:HONGXIANGYUAN_HONGXIANGYUAN）</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sv_platform_cclist</name>
          <description>CC list</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>sv_verity_purpose</name>
          <description>验收用途，official：正式验收，factory：验收</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>official</string>
              <string>factory</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>publish_username</name>
          <description>验收包释放用户，若为空，则使用项目客户号</description>
          <defaultValue>hongxiangyuan</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>pipeline {
    agent &apos;any&apos;
    stages {
        stage(&apos;prepare&apos;) {
            steps {
                script {
                    println &quot;project_name: ${project_name}&quot;
                    println &quot;code_dir: ${code_dir}&quot;
                    println &quot;server_ip_address: ${server_ip_address}&quot;
                    println &quot;server_hostname: ${server_hostname}&quot;
                    println &quot;server_passwd: ${server_passwd}&quot;
                    println &quot;build_variant: ${build_variant}&quot;
                    println &quot;build_sign: ${build_sign}&quot;
                    println &quot;build_action: ${build_action}&quot;
                    println &quot;build_verity: ${build_verity}&quot;
                    println &quot;need_publish: ${need_publish}&quot;
                    println &quot;devops_host_id: ${devops_host_id}&quot;
                    println &quot;devops_compile_id: ${devops_compile_id}&quot;
                    println &quot;is_new_project: ${is_new_project}&quot;
                    println &quot;test_pipeline: ${test_pipeline}&quot;
                    println &quot;test_host: ${test_host}&quot;
                    println &quot;script_path: ${script_path}&quot;
                    println &quot;sign_ftp_url: ${sign_ftp_url}&quot;
                    println &quot;sign_ftp_upload_username: ${sign_ftp_upload_username}&quot;
                    println &quot;sign_ftp_upload_passwd: ${sign_ftp_upload_passwd}&quot;
                    println &quot;sv_platform_url: ${sv_platform_url}&quot;
                    println &quot;sv_platform_username: ${sv_platform_username}&quot;
                    println &quot;sv_platform_passwd: ${sv_platform_passwd}&quot;
                    println &quot;sv_platform_terrace: ${sv_platform_terrace}&quot;
                    println &quot;sv_platform_board: ${sv_platform_board}&quot;
                    println &quot;sv_platform_model: ${sv_platform_model}&quot;
                    println &quot;sv_platform_brand: ${sv_platform_brand}&quot;
                    println &quot;sv_platform_odm: ${sv_platform_odm}&quot;
                    println &quot;sv_platform_cclist: ${sv_platform_cclist}&quot;
                    println &quot;sv_verity_purpose: ${sv_verity_purpose}&quot;
                    println &quot;publish_username: ${publish_username}&quot;
                }
            }
        }
        stage(&apos;prepare-jenkins-server&apos;) {
            steps {
                script {
                    sh &apos;&apos;&apos;
                    if ! type sshpass &gt;/dev/null 2&gt;&amp;1; then
                        echo -e &quot;\nprepare-jenkins-server: install sshpass&quot;
                        if type apt-get &gt;/dev/null 2&gt;&amp;1; then
                            sudo -S apt-get install sshpass -y &lt;&lt; EOF
1
EOF
                        elif type yum &gt;/dev/null 2&gt;&amp;1; then
                            yum install sshpass -y
                        fi
                    fi
                    if ! type pip3 &gt;/dev/null 2&gt;&amp;1; then
                        echo -e &quot;\nprepare-jenkins-server: install python3-pip&quot;
                        if type apt-get &gt;/dev/null 2&gt;&amp;1; then
                            sudo -S apt-get install python3-pip -y &lt;&lt; EOF
1
EOF
                        elif type yum &gt;/dev/null 2&gt;&amp;1; then
                            yum install python-pip3 -y
                        fi
                    fi
                    &apos;&apos;&apos;
                }
            }
        }
        stage(&apos;prepare-host-mkdir&apos;) {
            steps {
                sh &apos;&apos;&apos;
                sshpass -p &quot;$server_passwd&quot; ssh -o StrictHostKeyChecking=no &quot;$server_hostname@$server_ip_address&quot; &lt;&lt; EOF

                if [ ! -d ~/.jenkins/script ]; then
                    echo -e &quot;\ncreate path ~/.jenkins/script&quot;
                    mkdir -p ~/.jenkins/script
                fi
                cd ~/.jenkins/script
                pwd
                &apos;&apos;&apos;
            }
        }
        stage(&apos;prepare-host-upload-script&apos;) {
            steps {
                script {
                    sh &apos;&apos;&apos;
                    set +e
                    sshpass -p &quot;$server_passwd&quot; scp -r $script_path &quot;$server_hostname@$server_ip_address&quot;:~/.jenkins &gt; /dev/null 2&gt;&amp;1
                    
                    sshpass -p &quot;$server_passwd&quot; ssh -o StrictHostKeyChecking=no &quot;$server_hostname@$server_ip_address&quot; &lt;&lt; EOF
                    cd ~/.jenkins/script
                    pwd
                    ./link.sh $code_dir
                    
                    echo &quot;$cherry_picks&quot; &gt; cps 
                    &apos;&apos;&apos;
                }
            }
        }
        stage(&apos;build&apos;) {
            steps {
                sh &apos;&apos;&apos;
                sshpass -p &quot;$server_passwd&quot; ssh -o StrictHostKeyChecking=no &quot;$server_hostname@$server_ip_address&quot; &lt;&lt; EOF
                
                if [ ! -d &quot;$code_dir&quot; ]; then
                    echo &quot;Project code directory does not exist!!!&quot;
                    exit -1;
                fi
                
                cd &quot;$code_dir&quot;
                echo &quot;&quot;
                echo -------------------------------------------------
                echo code_dir: 
                pwd
                echo -------------------------------------------------
                echo &quot;&quot;
                
                if [ ! -f build.sh ]; then
                    echo &quot;File build.sh does not exist!!!&quot;
                    exit -2;
                fi
                
                if [ $test_pipeline == &quot;true&quot; ]; then
                    echo &quot;Just test pipeline, exit.&quot;
                    exit 0
                fi
                bash build.sh &quot;$project_name&quot; &quot;$build_variant&quot; &quot;$build_action&quot; &quot;$build_sign&quot; &quot;$build_verity&quot; &quot;$need_publish&quot; &quot;$devops_host_id&quot; &quot;$devops_compile_id&quot; &quot;$is_new_project&quot; &quot;$test_host&quot; &quot;$BUILD_URL&quot; &quot;$server_ip_address&quot;
                
                &apos;&apos;&apos;
            }
        }
        stage(&apos;file-upload&apos;) {
            steps {
                sh &apos;&apos;&apos;
                sshpass -p &quot;$server_passwd&quot; ssh -o StrictHostKeyChecking=no &quot;$server_hostname@$server_ip_address&quot; &lt;&lt; EOF
                if [ ! -d &quot;$code_dir&quot; ]; then
                    echo &quot;Project code directory does not exist!!!&quot;
                    exit -1;
                fi
                
                cd &quot;$code_dir&quot;
                echo &quot;&quot;
                echo -------------------------------------------------
                echo code_dir: 
                pwd
                echo -------------------------------------------------
                echo &quot;&quot;
                if [ &quot;$build_sign&quot; != &quot;true&quot; ]; then
                    echo -e &quot;\ndo not sign, exit!\n&quot;
                    exit 0
                fi
                
                # upload file
                echo -e &apos;\n./upload_ftp.py -p &quot;$project_name&quot; -h &quot;$sign_ftp_url&quot; -u &quot;$sign_ftp_upload_username&quot; -c &quot;$sign_ftp_upload_passwd&quot;\n&apos;
                python3 upload_ftp.py -p &quot;$project_name&quot; -h &quot;$sign_ftp_url&quot; -u &quot;$sign_ftp_upload_username&quot; -c &quot;$sign_ftp_upload_passwd&quot;
                # if [ &quot;$test_host&quot; == &quot;true&quot; ]; then
                #     echo ftp://hongxiangyuan@192.168.150.30/upload/202104/G1930EPQ_V15_HL/V15-HL-G1930DPQV1HB-ZY-0420-V0103.zip &gt; ftp_url.txt
                # else
                #     python3 upload_ftp.py -p &quot;$project_name&quot; -h &quot;$sign_ftp_url&quot; -u &quot;$sign_ftp_upload_username&quot; -c &quot;$sign_ftp_upload_passwd&quot;
                # fi
                &apos;&apos;&apos;
            }
        }
        
        stage(&apos;sign-verity&apos;) {
            steps {
                sh &apos;&apos;&apos;
                sshpass -p &quot;$server_passwd&quot; ssh -o StrictHostKeyChecking=no &quot;$server_hostname@$server_ip_address&quot; &lt;&lt; EOF
                if [ ! -d &quot;$code_dir&quot; ]; then
                    echo &quot;Project code directory does not exist!!!&quot;
                    exit -1;
                fi
                
                cd &quot;$code_dir&quot;
                echo &quot;&quot;
                echo -------------------------------------------------
                echo code_dir: 
                pwd
                echo -------------------------------------------------
                echo &quot;&quot;
                
                if [ &quot;$build_sign&quot; != &quot;true&quot; ]; then
                    echo -e &quot;\ndo not sign, exit!\n&quot;
                    exit 0
                fi
                
                if [ ! -f sign_verify.sh ]; then
                    echo -e &quot;File sign_verify.sh does not exist!!!&quot;
                    exit -2
                fi
                
                bash sign_verify.sh &quot;$project_name&quot; &quot;$sv_platform_url&quot; &quot;$sv_platform_username&quot; &quot;$sv_platform_passwd&quot; &quot;$sv_platform_terrace&quot; &quot;$sv_platform_board&quot; &quot;$sv_platform_cclist&quot; &quot;$sv_platform_model&quot; &quot;$sv_platform_brand&quot; &quot;$sv_platform_odm&quot; &quot;$publish_username&quot; &quot;$build_verity&quot; &quot;$sv_verity_purpose&quot;
                &apos;&apos;&apos;
            }
        }
    }
    
    post {
        aborted {
            echo &apos;this build was aborted&apos;
            sh &apos;&apos;&apos;
            cd $script_path
            
            # compile status: 7(stoped)
            echo &quot;./notify_status.py $devops_compile_id 7&quot;
            python3 notify_status.py $devops_compile_id 7
            
            # devops_server server status 0(idle)
            echo &quot;./update_db.py -t devops_server -k server_status -v 0 -w id -e $devops_host_id&quot;
            python3 update_db.py -t devops_server -k server_status -v 0 -w id -e $devops_host_id
            &apos;&apos;&apos;
        }
        failure {
            echo &apos;this build was failed&apos;
            sh &apos;&apos;&apos;
            cd $script_path
            
            # compile status: 6(build failed)
            echo &quot;./notify_status.py $devops_compile_id 6&quot;
            python3 notify_status.py $devops_compile_id 6
            
            # devops_server server status 0(idle)
            echo &quot;./update_db.py -t devops_server -k server_status -v 0 -w id -e $devops_host_id&quot;
            python3 update_db.py -t devops_server -k server_status -v 0 -w id -e $devops_host_id
            &apos;&apos;&apos;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>